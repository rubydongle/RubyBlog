---
title: dbfileformat
categories:
  - 技术文章
date: 2019-10-20 09:15:21
tags:
---


B树结构
```c
	
struct Btree {
  sqlite3 *db;
  BtShared *pBt;  // 这棵btree可共享的内容
  u8 inTrans;
  u8 sharable;
  u8 locked;
  u8 hasIncrblobCur;
  int wantToLock;
  int nBackup;
  u32 iDataVersion;
  Btree *pNext;
  Btree *pPrev;
#ifndef SQLITE_OMIT_SHARED_CACHE
  BtLock lock;
#endif
};
```

```c
struct BtShared {
  Pager *pPager;
  sqlite3 *db;
  BtCursor *pCursor;
  
}
```


摘自https://sqlite.org/src/artifact/91806f01fd1145a9



# 页
https://sqlite.org/fileformat2.html#pages
页的编号从1开始，最大页号是2147483646 (231 - 2)
主数据库中的每一个页只做下面的一个作用：
- The lock-byte page
- A freelist page
    - A freelist trunk page
    - A freelist leaf page
- A b-tree page
    - A table b-tree interior page
    - A table b-tree leaf page
    - An index b-tree interior page
    - An index b-tree leaf page
- A payload overflow page
- A pointer map page

通过PRAGMA page_size=xxx改变页的大小。如：
```bash
(py3env) batman@DESKTOP-970MMSR:/mnt$ sqlite3 test.db
SQLite version 3.11.0 2016-02-15 17:29:24
Enter ".help" for usage hints.
sqlite> PRAGMA page_size=4096;
sqlite> create table info(name text, age int);
sqlite> insert into info values('ruby', 31);
sqlite> .quit

(py3env) batman@DESKTOP-970MMSR:/mnt$ python ../sqlitedbparser/header.py test.db
Header string: "SQLite format 3 ":
        b'SQLite format 3\x00'
Page size in bytes.  (1 means 65536):
        b'\x10\x00'

2^12 = 4096

2^4*2^4*2^4*2 = 2^12*2

(py3env) batman@DESKTOP-970MMSR:/mnt$ hexdump -C test.db
00000000  53 51 4c 69 74 65 20 66  6f 72 6d 61 74 20 33 00  |SQLite format 3.|
00000010  10 00 01 01 00 40 20 20  00 00 00 02 00 00 00 02  |.....@  ........|
00000020  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 04  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 02  |................|
00000060  00 2d f1 b8 0d 00 00 00  01 0f c5 00 0f c5 00 00  |.-..............|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000fc0  00 00 00 00 00 39 01 06  17 15 15 01 57 74 61 62  |.....9......Wtab|
00000fd0  6c 65 69 6e 66 6f 69 6e  66 6f 02 43 52 45 41 54  |leinfoinfo.CREAT|
00000fe0  45 20 54 41 42 4c 45 20  69 6e 66 6f 28 6e 61 6d  |E TABLE info(nam|
00000ff0  65 20 74 65 78 74 2c 20  61 67 65 20 69 6e 74 29  |e text, age int)|
00001000  0d 00 00 00 01 0f f6 00  0f f6 00 00 00 00 00 00  |................|
00001010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00001ff0  00 00 00 00 00 00 08 01  03 15 01 72 75 62 79 1f  |...........ruby.|
00002000

2个page？


默认page是1024的
(py3env) batman@DESKTOP-970MMSR:/mnt$ sqlite3 test1.db
SQLite version 3.11.0 2016-02-15 17:29:24
Enter ".help" for usage hints.
sqlite> create table info(name text, int age);
sqlite> insert into info values('jhon', 14);
sqlite> .quit

(py3env) batman@DESKTOP-970MMSR:/mnt$ python ../sqlitedbparser/header.py test1.db
test1.db
Header string: "SQLite format 3 ":
        b'SQLite format 3\x00'
Page size in bytes.  (1 means 65536):
        b'\x04\x00'

2^10 = 1024
2^4*2^4*2^3 = 2^10*2

(py3env) batman@DESKTOP-970MMSR:/mnt$ hexdump -C test1.db
// page 1:
----------------------------------------------------------------------------------------
00000000  53 51 4c 69 74 65 20 66  6f 72 6d 61 74 20 33 00  |SQLite format 3.|
00000010  04 00 01 01 00 40 20 20  00 00 00 02 00 00 00 02  |.....@  ........|
00000020  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 04  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 01 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 02  |................|
00000060  00 2d f1 b8 |0d |00 00| 00  01| 03 c5| 00 03 c5 00 00  |.-..............|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000003c0  00 00 00 00 00 39 01 06  17 15 15 01 57 74 61 62  |.....9......Wtab|
000003d0  6c 65 69 6e 66 6f 69 6e  66 6f 02 43 52 45 41 54  |leinfoinfo.CREAT|
000003e0  45 20 54 41 42 4c 45 20  69 6e 66 6f 28 6e 61 6d  |E TABLE info(nam|
000003f0  65 20 74 65 78 74 2c 20  69 6e 74 20 61 67 65 29  |e text, int age)|

// page 2:
-----------------------------------------------------------------------------------------
00000400  0d |00 00| 00 01| 03 f6| 00  03 f6 00 00 00 00 00 00  |................|
00000410  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
000007f0  00 00 00 00 00 00 08 01  03 15 01 6a 68 6f 6e 0e  |...........jhon.|
00000800
```


## b-tree page
在数据库头的偏移52位置
52	4	The page number of the largest root b-tree page when in auto-vacuum or incremental-vacuum modes, or zero otherwise.

A b-tree page is divided into regions in the following order:

The 100-byte database file header (found on page 1 only)
The 8 or 12 byte b-tree page header
The cell pointer array
Unallocated space
The cell content area
The reserved region.

磁盘相关、文件系统相关
https://sqlite.org/c3ref/io_methods.html
xSectorSize()方法返回设备的扇区大小。
针对unix api其实现在src/os_unix.c中
通过系统调用fstatvfs实现的
man fstatvfs
```c
int statvfs(const char *path, struct statvfs *buf);
int fstatvfs(int fd, struct statvfs *buf);

struct statvfs {
    unsigned long f_bsize;	/* Filesystem block size */
    unsigned long f_frsize;
    fsblkcnt_t f_blocks;
}

```


# WAL文件
https://sqlite.org/fileformat2.html 4.3

Checkpoint算法
在checkpoint，WAL首先通过VFS的xSync刷新到永久存储上.后面WAL中的有效内容传输到database文件。最后，数据库刷新再次使用xSync刷新到永久存储上。

